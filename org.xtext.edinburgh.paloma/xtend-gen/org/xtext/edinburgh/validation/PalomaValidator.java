/**
 * generated by Xtext
 */
package org.xtext.edinburgh.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.xtext.edinburgh.paloma.AGENTS;
import org.xtext.edinburgh.paloma.AGENT_NUM;
import org.xtext.edinburgh.paloma.AgentState;
import org.xtext.edinburgh.paloma.Model;
import org.xtext.edinburgh.paloma.PalomaPackage;
import org.xtext.edinburgh.paloma.Param;
import org.xtext.edinburgh.paloma.Prefix;
import org.xtext.edinburgh.paloma.Terminal_PR_Expr;
import org.xtext.edinburgh.paloma.Terminal_RATE_Expr;
import org.xtext.edinburgh.validation.AbstractPalomaValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class PalomaValidator extends AbstractPalomaValidator {
  public final static String INVALID_NAME = "invalidName";
  
  @Check
  public void checkParamNonExist(final Param param) {
    EObject _eContainer = param.eContainer();
    Model model = ((Model) _eContainer);
    int count = 0;
    EList<Param> _params = model.getParams();
    for (final Param other : _params) {
      String _name = param.getName();
      String _name_1 = other.getName();
      boolean _equals = _name.equals(_name_1);
      if (_equals) {
        count++;
        if ((count > 1)) {
          this.error("Param names have to be unique", PalomaPackage.Literals.PARAM__NAME, 
            ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
          return;
        }
      }
    }
  }
  
  @Check
  public void checkStateNonExist(final AgentState state) {
    EObject _eContainer = state.eContainer();
    Model model = ((Model) _eContainer);
    int count = 0;
    EList<AgentState> _states = model.getStates();
    for (final AgentState other : _states) {
      String _name = state.getName();
      String _name_1 = other.getName();
      boolean _equals = _name.equals(_name_1);
      if (_equals) {
        count++;
        if ((count > 1)) {
          this.error("State names have to be unique", PalomaPackage.Literals.AGENT_STATE__NAME, 
            ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
          return;
        }
      }
    }
  }
  
  @Check
  public void checkAgentExist(final AGENTS agents) {
    EObject tempt = agents.eContainer();
    while (true) {
      EObject _eContainer = tempt.eContainer();
      boolean _equals = Objects.equal(_eContainer, null);
      if (_equals) {
        Model model = ((Model) tempt);
        EList<AgentState> _states = model.getStates();
        for (final AgentState state : _states) {
          {
            String _name = state.getName();
            String _type = agents.getType();
            boolean _equals_1 = _name.equals(_type);
            if (_equals_1) {
              return;
            }
            EList<Prefix> _prefixs = state.getPrefixs();
            for (final Prefix prefix : _prefixs) {
              String _continue = prefix.getContinue();
              String _type_1 = agents.getType();
              boolean _equals_2 = _continue.equals(_type_1);
              if (_equals_2) {
                return;
              }
            }
          }
        }
        this.error("Unknown agent state", PalomaPackage.Literals.AGENTS__TYPE, 
          ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
        return;
      } else {
        EObject _eContainer_1 = tempt.eContainer();
        tempt = _eContainer_1;
      }
    }
  }
  
  @Check
  public void checkAgentNumExist(final AGENT_NUM agents) {
    EObject tempt = agents.eContainer();
    while (true) {
      EObject _eContainer = tempt.eContainer();
      boolean _equals = Objects.equal(_eContainer, null);
      if (_equals) {
        Model model = ((Model) tempt);
        EList<AgentState> _states = model.getStates();
        for (final AgentState state : _states) {
          String _name = state.getName();
          String _type = agents.getType();
          boolean _equals_1 = _name.equals(_type);
          if (_equals_1) {
            return;
          }
        }
        this.error("Undefined agent state", PalomaPackage.Literals.AGENT_NUM__TYPE, 
          ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
        return;
      } else {
        EObject _eContainer_1 = tempt.eContainer();
        tempt = _eContainer_1;
      }
    }
  }
  
  @Check
  public void checkParamExistForTRE(final Terminal_RATE_Expr iRange) {
    EObject tempt = iRange.eContainer();
    while (true) {
      EObject _eContainer = tempt.eContainer();
      boolean _equals = Objects.equal(_eContainer, null);
      if (_equals) {
        Model model = ((Model) tempt);
        EList<Param> _params = model.getParams();
        for (final Param param : _params) {
          String _linkedParam = iRange.getLinkedParam();
          String _name = param.getName();
          boolean _equals_1 = _linkedParam.equals(_name);
          if (_equals_1) {
            return;
          }
        }
        this.error("Undefined param", PalomaPackage.Literals.TERMINAL_RATE_EXPR__LINKED_PARAM, 
          ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
        return;
      } else {
        EObject _eContainer_1 = tempt.eContainer();
        tempt = _eContainer_1;
      }
    }
  }
  
  @Check
  public void checkParamExistForTPE(final Terminal_PR_Expr iRange) {
    EObject tempt = iRange.eContainer();
    while (true) {
      EObject _eContainer = tempt.eContainer();
      boolean _equals = Objects.equal(_eContainer, null);
      if (_equals) {
        Model model = ((Model) tempt);
        EList<Param> _params = model.getParams();
        for (final Param param : _params) {
          String _linkedParam = iRange.getLinkedParam();
          String _name = param.getName();
          boolean _equals_1 = _linkedParam.equals(_name);
          if (_equals_1) {
            return;
          }
        }
        this.error("Undefined param", PalomaPackage.Literals.TERMINAL_PR_EXPR__LINKED_PARAM, 
          ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
        return;
      } else {
        EObject _eContainer_1 = tempt.eContainer();
        tempt = _eContainer_1;
      }
    }
  }
  
  @Check
  public void checkPrefix(final Prefix prefix) {
    EObject tempt = prefix.eContainer();
    while (true) {
      EObject _eContainer = tempt.eContainer();
      boolean _equals = Objects.equal(_eContainer, null);
      if (_equals) {
        Model model = ((Model) tempt);
        EList<AgentState> _states = model.getStates();
        for (final AgentState state : _states) {
          String _name = state.getName();
          String _continue = prefix.getContinue();
          boolean _equals_1 = _name.equals(_continue);
          if (_equals_1) {
            return;
          }
        }
        this.warning("Undefined continuing agent state", PalomaPackage.Literals.PREFIX__CONTINUE, 
          ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
        return;
      } else {
        EObject _eContainer_1 = tempt.eContainer();
        tempt = _eContainer_1;
      }
    }
  }
}
