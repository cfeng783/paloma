/**
 * generated by Xtext
 */
package org.xtext.edinburgh.ui.outline;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.xtext.edinburgh.paloma.Prefix;

/**
 * Customization of the default outline structure.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
@SuppressWarnings("all")
public class PalomaOutlineTreeProvider extends DefaultOutlineTreeProvider {
  public void _createChildren(final IOutlineNode parentNode, final EObject modelElement) {
    EList<EObject> _eContents = modelElement.eContents();
    for (final EObject childElement : _eContents) {
      EClass _eClass = childElement.eClass();
      String _name = _eClass.getName();
      String _string = _name.toString();
      boolean _equalsIgnoreCase = _string.equalsIgnoreCase("Param");
      if (_equalsIgnoreCase) {
        this.createNode(parentNode, childElement);
      } else {
        EClass _eClass_1 = childElement.eClass();
        String _name_1 = _eClass_1.getName();
        String _string_1 = _name_1.toString();
        boolean _equalsIgnoreCase_1 = _string_1.equalsIgnoreCase("Population");
        if (_equalsIgnoreCase_1) {
          this.createNode(parentNode, childElement);
        } else {
          EClass _eClass_2 = childElement.eClass();
          String _name_2 = _eClass_2.getName();
          String _string_2 = _name_2.toString();
          boolean _equalsIgnoreCase_2 = _string_2.equalsIgnoreCase("AgentState");
          if (_equalsIgnoreCase_2) {
            this.createNode(parentNode, childElement);
          } else {
            EClass _eClass_3 = childElement.eClass();
            String _name_3 = _eClass_3.getName();
            String _string_3 = _name_3.toString();
            boolean _equalsIgnoreCase_3 = _string_3.equalsIgnoreCase("AGENTS");
            if (_equalsIgnoreCase_3) {
              this.createNode(parentNode, childElement);
            } else {
              EClass _eClass_4 = childElement.eClass();
              String _name_4 = _eClass_4.getName();
              String _string_4 = _name_4.toString();
              boolean _equalsIgnoreCase_4 = _string_4.equalsIgnoreCase("Prefix");
              if (_equalsIgnoreCase_4) {
                this.createNode(parentNode, childElement);
              }
            }
          }
        }
      }
    }
  }
  
  public boolean _isLeaf(final Prefix prefix) {
    return true;
  }
}
